use std::f32::consts::PI;

use egui::epaint::*;
use enum_map::EnumMap;

use macroquad::models::{Mesh, Vertex};
use macroquad::prelude::{vec2, vec3, Mat3};
use macroquad::color::{Color, colors};

use egui::{Shape, Stroke};

#[derive(Clone, Copy, Debug, Enum)]
pub enum Cube {
    Green,
    Red,
    Blue,
    Yellow,
    White,
    NorthRedWhite,
    WestRedWhite,
    SouthRedWhite,
    EastRedWhite,
}

pub struct CubeInfo {
    pub mesh: Mesh,
    pub egui_shape: egui::Shape,
}

pub type CubeMap = EnumMap<Cube, CubeInfo>;

pub fn create_default_cubemap() -> CubeMap {
    let map = enum_map!{
        Cube::Green => CubeInfo {
            mesh: default_cube(colors::GREEN),
            egui_shape: Shape::Rect(RectShape{
                rect: egui::Rect { min: pos2(0.0, 0.0), max: pos2(1.0, 1.0) },
                rounding: Rounding::none(),
                fill: egui::Color32::GREEN,
                stroke: Stroke::none(),
            }),
        },
        Cube::Red => CubeInfo {
            mesh: default_cube(colors::RED),
            egui_shape: Shape::Rect(RectShape{
                rect: egui::Rect { min: pos2(0.0, 0.0), max: pos2(1.0, 1.0) },
                rounding: Rounding::none(),
                fill: egui::Color32::RED,
                stroke: Stroke::none(),
            }),
        },
        Cube::Blue => CubeInfo {
            mesh: default_cube(colors::BLUE),
            egui_shape: Shape::Rect(RectShape{
                rect: egui::Rect { min: pos2(0.0, 0.0), max: pos2(1.0, 1.0) },
                rounding: Rounding::none(),
                fill: egui::Color32::BLUE,
                stroke: Stroke::none(),
            }),
        },
        Cube::Yellow => CubeInfo {
            mesh: default_cube(colors::GOLD),
            egui_shape: Shape::Rect(RectShape{
                rect: egui::Rect { min: pos2(0.0, 0.0), max: pos2(1.0, 1.0) },
                rounding: Rounding::none(),
                fill: egui::Color32::GOLD,
                stroke: Stroke::none(),
            }),
        },
        Cube::White => CubeInfo {
            mesh: default_cube(colors::WHITE),
            egui_shape: Shape::Rect(RectShape{
                rect: egui::Rect { min: pos2(0.0, 0.0), max: pos2(1.0, 1.0) },
                rounding: Rounding::none(),
                fill: egui::Color32::WHITE,
                stroke: Stroke::none(),
            }),
        },
        Cube::NorthRedWhite => CubeInfo {
            mesh: split_color_cube(colors::RED, colors::WHITE, 0.0),
            egui_shape: Shape::Vec(vec![
                Shape::Path(PathShape {
                    points: vec![pos2(1.0, 0.0), pos2(0.0, 0.0), pos2(0.0, 1.0)],
                    closed: true,
                    stroke: Stroke::none(),
                    fill: egui::Color32::RED,
                }),
                Shape::Path(PathShape {
                    points: vec![pos2(1.0, 1.0), pos2(1.0, 0.0), pos2(0.0, 1.0)],
                    closed: true,
                    stroke: Stroke::none(),
                    fill: egui::Color32::WHITE,
                }),
            ]),
        },
        Cube::WestRedWhite => CubeInfo {
            mesh: split_color_cube(colors::RED, colors::WHITE, 0.5 * PI),
            egui_shape: Shape::Vec(vec![
                Shape::Path(PathShape {
                    points: vec![pos2(0.0, 0.0), pos2(0.0, 1.0), pos2(1.0, 1.0)],
                    closed: true,
                    stroke: Stroke::none(),
                    fill: egui::Color32::RED,
                }),
                Shape::Path(PathShape {
                    points: vec![pos2(0.0, 0.0), pos2(1.0, 0.0), pos2(1.0, 1.0)],
                    closed: true,
                    stroke: Stroke::none(),
                    fill: egui::Color32::WHITE,
                }),
            ]),
        },
        Cube::SouthRedWhite => CubeInfo {
            mesh: split_color_cube(colors::RED, colors::WHITE, 1.0 * PI),
            egui_shape: Shape::Vec(vec![
                Shape::Path(PathShape {
                    points: vec![pos2(1.0, 0.0), pos2(0.0, 0.0), pos2(0.0, 1.0)],
                    closed: true,
                    stroke: Stroke::none(),
                    fill: egui::Color32::WHITE,
                }),
                Shape::Path(PathShape {
                    points: vec![pos2(1.0, 1.0), pos2(1.0, 0.0), pos2(0.0, 1.0)],
                    closed: true,
                    stroke: Stroke::none(),
                    fill: egui::Color32::RED,
                }),
            ]),
        },
        Cube::EastRedWhite => CubeInfo {
            mesh: split_color_cube(colors::RED, colors::WHITE, 1.5 * PI),
            egui_shape: Shape::Vec(vec![
                Shape::Path(PathShape {
                    points: vec![pos2(0.0, 0.0), pos2(0.0, 1.0), pos2(1.0, 1.0)],
                    closed: true,
                    stroke: Stroke::none(),
                    fill: egui::Color32::WHITE,
                }),
                Shape::Path(PathShape {
                    points: vec![pos2(0.0, 0.0), pos2(1.0, 0.0), pos2(1.0, 1.0)],
                    closed: true,
                    stroke: Stroke::none(),
                    fill: egui::Color32::RED,
                }),
            ]),
        },
    };

    map
}

pub fn default_cube(color: Color) -> Mesh {
    split_color_cube(color, color, 0.0)
}

pub fn split_color_cube(color_north: Color, color_south: Color, rotation: f32) -> Mesh {

    let uv = vec2(0.0, 0.0);
    let rot = Mat3::from_rotation_z(rotation);
    let vertices = vec![
        Vertex{position: rot*vec3(-0.500000, -0.466667,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667, -0.500000,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667, -0.466667,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000, -0.500000,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667, -0.500000,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000,  0.466667,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000,  0.500000,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000,  0.466667,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000, -0.466667, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667, -0.500000, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667, -0.466667, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000, -0.466667,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000, -0.500000,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000, -0.466667,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667,  0.500000,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000,  0.500000,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667,  0.500000,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000,  0.500000,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000,  0.466667,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000,  0.466667,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000,  0.500000, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667,  0.466667, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667,  0.500000, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000,  0.466667, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000, -0.500000,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000, -0.466667,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000,  0.500000,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667,  0.466667,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667,  0.500000,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667,  0.466667,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667,  0.466667, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000, -0.466667, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000,  0.466667, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667,  0.500000, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000,  0.500000, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667,  0.500000,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667, -0.466667, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000, -0.500000, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667, -0.500000, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000, -0.500000,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667, -0.500000,  0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667, -0.500000,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667, -0.466667,  0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667, -0.500000, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000, -0.500000, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000, -0.500000, -0.500000), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667,  0.500000, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000,  0.500000, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000, -0.466667, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000, -0.500000, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000,  0.466667, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000,  0.500000, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.466667,  0.500000, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3( 0.500000, -0.466667, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.500000,  0.466667, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667, -0.500000, -0.466667), uv, color: colors::BLACK},
        Vertex{position: rot*vec3(-0.466667,  0.466667,  0.500000), uv, color: color_south},
        Vertex{position: rot*vec3( 0.466667, -0.466667,  0.500000), uv, color: color_south},
        Vertex{position: rot*vec3( 0.466667,  0.466667,  0.500000), uv, color: color_south},
        Vertex{position: rot*vec3( 0.466667, -0.500000,  0.466667), uv, color: color_north},
        Vertex{position: rot*vec3(-0.466667, -0.500000, -0.466667), uv, color: color_north},
        Vertex{position: rot*vec3( 0.466667, -0.500000, -0.466667), uv, color: color_north},
        Vertex{position: rot*vec3(-0.466667,  0.500000,  0.466667), uv, color: color_south},
        Vertex{position: rot*vec3( 0.466667,  0.500000, -0.466667), uv, color: color_south},
        Vertex{position: rot*vec3(-0.466667,  0.500000, -0.466667), uv, color: color_south},
        Vertex{position: rot*vec3(-0.500000, -0.466667,  0.466667), uv, color: color_north},
        Vertex{position: rot*vec3(-0.500000,  0.466667, -0.466667), uv, color: color_north},
        Vertex{position: rot*vec3(-0.500000, -0.466667, -0.466667), uv, color: color_north},
        Vertex{position: rot*vec3( 0.500000,  0.466667,  0.466667), uv, color: color_south},
        Vertex{position: rot*vec3( 0.500000, -0.466667, -0.466667), uv, color: color_south},
        Vertex{position: rot*vec3( 0.500000,  0.466667, -0.466667), uv, color: color_south},
        Vertex{position: rot*vec3(-0.466667,  0.466667, -0.500000), uv, color: color_south},
        Vertex{position: rot*vec3( 0.466667,  0.466667, -0.500000), uv, color: color_south},
        Vertex{position: rot*vec3( 0.466667, -0.466667, -0.500000), uv, color: color_south},
        Vertex{position: rot*vec3(-0.466667, -0.500000,  0.466667), uv, color: color_north},
        Vertex{position: rot*vec3( 0.466667,  0.500000,  0.466667), uv, color: color_south},
        Vertex{position: rot*vec3(-0.500000,  0.466667,  0.466667), uv, color: color_north},
        Vertex{position: rot*vec3( 0.500000, -0.466667,  0.466667), uv, color: color_south},
        Vertex{position: rot*vec3(-0.466667,  0.466667, -0.500000), uv, color: color_north},
        Vertex{position: rot*vec3( 0.466667, -0.466667, -0.500000), uv, color: color_north},
        Vertex{position: rot*vec3(-0.466667, -0.466667, -0.500000), uv, color: color_north},
        Vertex{position: rot*vec3(-0.466667,  0.466667,  0.500000), uv, color: color_north},
        Vertex{position: rot*vec3(-0.466667, -0.466667,  0.500000), uv, color: color_north},
        Vertex{position: rot*vec3( 0.466667, -0.466667,  0.500000), uv, color: color_north},
    ];

    let indices: Vec<u16> = vec![
        0,1,2,
        1,3,4,
        5,6,7,
        8,9,10,
        11,12,13,
        14,15,16,
        17,18,15,
        19,13,18,
        20,21,22,
        23,10,21,
        24,25,3,
        0,7,25,
        26,27,28,
        5,2,27,
        29,11,19,
        14,19,17,
        28,29,14,
        30,31,32,
        33,32,34,
        22,30,33,
        26,35,6,
        28,16,35,
        36,37,31,
        10,38,36,
        39,40,12,
        41,4,40,
        42,39,11,
        2,41,42,
        43,38,9,
        44,9,45,
        12,43,44,
        46,22,33,
        47,33,34,
        6,46,47,
        48,32,31,
        49,31,37,
        3,48,49,
        50,8,23,
        51,23,20,
        15,50,51,
        52,20,22,
        16,51,52,
        53,45,8,
        13,44,53,
        54,34,32,
        7,47,54,
        55,37,38,
        4,49,55,
        56,57,58,
        59,60,61,
        62,63,64,
        65,66,67,
        68,69,70,
        0,24,1,
        1,24,3,
        5,26,6,
        8,45,9,
        11,39,12,
        14,17,15,
        17,19,18,
        19,11,13,
        20,23,21,
        23,8,10,
        24,0,25,
        0,5,7,
        26,5,27,
        5,0,2,
        29,42,11,
        14,29,19,
        28,27,29,
        30,36,31,
        33,30,32,
        22,21,30,
        26,28,35,
        28,14,16,
        36,38,37,
        10,9,38,
        39,41,40,
        41,1,4,
        42,41,39,
        2,1,41,
        43,55,38,
        44,43,9,
        12,40,43,
        46,52,22,
        47,46,33,
        6,35,46,
        48,54,32,
        49,48,31,
        3,25,48,
        50,53,8,
        51,50,23,
        15,18,50,
        52,51,20,
        16,15,51,
        53,44,45,
        13,12,44,
        54,47,34,
        7,6,47,
        55,49,37,
        4,3,49,
        71,72,73,
        59,74,60,
        62,75,63,
        65,76,66,
        68,77,69,
        78,79,80,
        81,82,83,
    ];

    Mesh {
        vertices,
        indices,
        texture: None
    }
}
